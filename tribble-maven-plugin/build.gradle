/*
 *    Copyright 2018 Satellite Applications Catapult Limited.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

group rootProject.group
version rootProject.version

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:${rootProject.bintrayVersion}"
        classpath "com.adtran:scala-multiversion-plugin:1.+"
    }
}

apply plugin : 'java'
apply plugin : 'maven'
apply plugin : 'maven-publish'
apply plugin : 'com.jfrog.bintray'
apply plugin : 'com.adtran.scala-multiversion-plugin'

ext.mavenVersion = '3.5.3'
if (System.properties['mvnpath']) {
    ext.mavenPath = System.properties['mvnpath'].toString()
} else {
    ext.mavenPath = 'mvn'
}

sourceCompatibility = 1.8
repositories {
    jcenter()
}


dependencies {
    compile "org.scala-lang:scala-library:$scalaVersion"
    compile ("org.apache.maven:maven-core:$mavenVersion")
    compile ("org.apache.maven:maven-plugin-api:$mavenVersion")
    compile ("org.apache.maven.plugin-tools:maven-plugin-annotations:3.5.2")

    compile project(path: ":tribble-core", configuration: 'shadow')
}

// to create the maven plugin we need to create a pom first and then use that
// to run the mvn tool to generate the plugin xml files. Which we can then use
// in the jar and end up with a working plugin.
task createPom() {
    doLast {
        def pd = project.sourceSets.main.java.srcDirs
        def bd = project.compileJava.destinationDir.absolutePath
        String pack = project.group.replace('.', '/')
        install.repositories.mavenInstaller.pom = pom {
            project {
                groupId project.group
                artifactId project.name
                version project.version
                packaging 'maven-plugin'

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                properties {
                    'project.build.sourceEncoding' 'UTF-8'
                }

            }
        }.withXml {
            asNode().appendNode('build')
                    .with {
                appendNode('directory', pd + pack)
                appendNode('outputDirectory', bd)
            }
        }.whenConfigured { pom ->
            def t = pom.dependencies.find {dep -> dep.groupId == 'org.catapult.sa' && dep.artifactId == 'tribble-core'}
            t.scope = "runtime"
            t.type = "jar"
        }

        println("project path: ${project.sourceSets.main.java.srcDirs}")
        println("build path: ${project.buildDir.absolutePath}")

        install.repositories.mavenInstaller.pom.writeTo("${project.buildDir.absolutePath}/pom.xml")
    }
}

task pluginDescriptor( type: Exec ) {
    dependsOn 'createPom', 'compileJava', ':tribble-core:install' // needs to be able to find tribble-core from inside maven

    environment("JAVA_HOME", "${System.properties.'java.home'}")

    commandLine mavenPath, '-e', '-B', '--file', "${buildDir.canonicalPath}/pom.xml", 'org.apache.maven.plugins:maven-plugin-plugin:3.5:descriptor'
    doFirst {
        final File pom = project.file("${buildDir.canonicalPath}/pom.xml")

        assert pom.file, "[$pom.canonicalPath] was not created"
    }
    doLast {
        String pack = project.group.replace('.', '/')
        final  pluginDescriptor = new File(( File ) project.compileJava.destinationDir, '/META-INF/maven/plugin.xml' )
        assert pluginDescriptor.file, "[$pluginDescriptor.canonicalPath] was not created"
        println "Plugin descriptor file:$pluginDescriptor.canonicalPath is created successfully"
    }
}

jar.dependsOn 'pluginDescriptor'

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

bintray {
    user = project.hasProperty('bintrayUser') ?: System.getenv('BINTRAY_USER') ?: System.getProperty("BINTRAY_USER")
    key = project.hasProperty('bintrayApiKey') ?: System.getenv('BINTRAY_KEY') ?: System.getProperty("BINTRAY_KEY")
    pkg {
        repo = 'Tribble'
        name = project.name
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/SatelliteApplicationsCatapult/tribble.git'
        publications = ['tribbleMavenPub']
        version {
            name = project.version
            released  = new Date()
            vcsTag = 'v' + project.version
        }
    }
}

publishing {
    publications {
        tribbleMavenPub(MavenPublication) {
            from components.java
            groupId project.group
            artifactId project.name
            version project.version
        }
    }
}
